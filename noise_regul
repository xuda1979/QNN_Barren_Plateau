    # Layer of entangling gates
    qml.CNOT(wires=)
    # Add noise after the gate
    qml.DepolarizingChannel(noise_strength, wires=1)

    qml.CNOT(wires=[1, 2])
    # Add noise after the gate
    qml.DepolarizingChannel(noise_strength, wires=2)

    return qml.expval(qml.PauliZ(n_qubits - 1))

# --- Treat noise as a hyperparameter ---
params = np.random.uniform(0, 2 * np.pi, n_qubits)

# Case 1: Noiseless execution
noise_level_1 = 0.0
result_noiseless = noisy_qnn(params, noise_level_1)

# Case 2: Execution with some noise
noise_level_2 = 0.05 # 5% depolarizing probability
result_noisy = noisy_qnn(params, noise_level_2)

print("--- Noise as a Hyperparameter ---")
print(f"Output with noise_strength = {noise_level_1}: {result_noiseless:.4f}")
print(f"Output with noise_strength = {noise_level_2}: {result_noisy:.4f}")
print("\nBy tuning 'noise_strength' as a hyperparameter, we can find a level")
print("that improves generalization on a validation set.")

# Visualize the circuit with noise channels
fig, ax = qml.draw_mpl(noisy_qnn)(params, noise_level_2)
plt.suptitle("QNN with Noise Channels for Regularization")
plt.show()
